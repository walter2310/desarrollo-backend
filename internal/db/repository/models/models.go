// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PaymentMethods string

const (
	PaymentMethodsPagomvil      PaymentMethods = "Pago m√≥vil"
	PaymentMethodsTransferencia PaymentMethods = "Transferencia"
)

func (e *PaymentMethods) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethods(s)
	case string:
		*e = PaymentMethods(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethods: %T", src)
	}
	return nil
}

type NullPaymentMethods struct {
	PaymentMethods PaymentMethods
	Valid          bool // Valid is true if PaymentMethods is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethods) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethods, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethods.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethods) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethods), nil
}

type PaymentStatus string

const (
	PaymentStatusPENDING  PaymentStatus = "PENDING"
	PaymentStatusFAILED   PaymentStatus = "FAILED"
	PaymentStatusPAID     PaymentStatus = "PAID"
	PaymentStatusREFUNDED PaymentStatus = "REFUNDED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type UserRoles string

const (
	UserRolesUser  UserRoles = "User"
	UserRolesAdmin UserRoles = "Admin"
)

func (e *UserRoles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRoles(s)
	case string:
		*e = UserRoles(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRoles: %T", src)
	}
	return nil
}

type NullUserRoles struct {
	UserRoles UserRoles
	Valid     bool // Valid is true if UserRoles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRoles) Scan(value interface{}) error {
	if value == nil {
		ns.UserRoles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRoles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRoles), nil
}

type AccountContact struct {
	ID            int32
	UserAccountID pgtype.Int4
	Name          pgtype.Text
	Cedula        pgtype.Text
	BankID        pgtype.Int4
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type Bank struct {
	ID         int32
	Name       pgtype.Text
	BankNumber pgtype.Int4
}

type Bill struct {
	ID            int32
	OrderID       pgtype.Int4
	PaymentMethod NullPaymentMethods
	AmountPaid    pgtype.Numeric
	TransactionID pgtype.Text
	PaidAt        pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type Combo struct {
	ID          int32
	Name        pgtype.Text
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type ComboProduct struct {
	ID        int32
	ComboID   pgtype.Int4
	ProductID pgtype.Int4
	Price     pgtype.Numeric
	Quantity  pgtype.Numeric
}

type Comment struct {
	ID        int32
	UserID    pgtype.Int4
	ComboID   pgtype.Int4
	Content   pgtype.Text
	CreatedAt pgtype.Timestamp
}

type Membership struct {
	ID        int32
	IsActive  pgtype.Bool
	StartDate pgtype.Timestamp
	EndDate   pgtype.Timestamp
	UserID    pgtype.Int4
}

type Order struct {
	ID            int32
	ComboID       pgtype.Int4
	UserID        pgtype.Int4
	Amount        pgtype.Numeric
	PaymentStatus NullPaymentStatus
	PaidAt        pgtype.Timestamp
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type Product struct {
	ID        int32
	Name      pgtype.Text
	Price     pgtype.Numeric
	Stock     pgtype.Numeric
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type ProductOrder struct {
	ID            int32
	ProductID     pgtype.Int4
	SupplierID    pgtype.Int4
	Price         pgtype.Numeric
	Amount        pgtype.Numeric
	PaymentStatus NullPaymentStatus
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type SchemaMigration struct {
	Version int64
	Dirty   bool
}

type Supplier struct {
	ID          int32
	Name        pgtype.Text
	PhoneNumber pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type User struct {
	ID          int32
	Fullname    pgtype.Text
	Email       pgtype.Text
	Password    pgtype.Text
	Discapacity pgtype.Bool
	DateOfBirth pgtype.Date
	Role        NullUserRoles
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type UserAccount struct {
	ID            int32
	UserID        pgtype.Int4
	AccountNumber pgtype.Text
	Balance       pgtype.Numeric
	Cedula        pgtype.Text
	PhoneNumber   pgtype.Text
	BankID        pgtype.Int4
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}
